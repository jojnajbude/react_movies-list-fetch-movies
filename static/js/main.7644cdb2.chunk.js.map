{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","API_URL","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","addMovie","isMovieInTheList","useState","setMovie","setQuery","isError","setIsError","isInputError","setIsInputError","isWaitToMovie","setWaitToMovie","findMovie","event","a","preventDefault","toLowerCase","response","Title","Plot","Poster","imdbID","htmlFor","type","id","placeholder","value","onChange","target","classNames","disabled","length","onClick","App","setMovies","setIsMovieInTheList","every","movieInList","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7644cdb2.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_KEY = '2c7e5227';\nconst API_URL = `https://www.omdbapi.com/?apikey=${API_KEY}`;\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\n\nconst initialPosterValue\n  = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\ntype Props = {\n  addMovie: (movie: Movie) => void,\n  isMovieInTheList: boolean,\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie, isMovieInTheList }) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [query, setQuery] = useState('');\n  const [isError, setIsError] = useState(false);\n  const [isInputError, setIsInputError] = useState(false);\n  const [isWaitToMovie, setWaitToMovie] = useState(false);\n\n  const clearForm = () => {\n    setQuery('');\n    setMovie(null);\n  };\n\n  const findMovie = async (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    setWaitToMovie(true);\n\n    try {\n      const response = await getMovie(query.toLowerCase());\n\n      setWaitToMovie(false);\n\n      if ('Error' in response) {\n        setIsError(true);\n        setIsInputError(true);\n\n        return;\n      }\n\n      setMovie({\n        title: response.Title,\n        description: response.Plot,\n        imgUrl: response.Poster === 'N/A'\n          ? initialPosterValue\n          : response.Poster,\n        imdbUrl: `https://www.imdb.com/title/${response.imdbID}`,\n        imdbId: response.imdbID,\n      });\n      setIsError(false);\n    } catch {\n      setIsError(true);\n      setWaitToMovie(false);\n      setIsInputError(true);\n    }\n  };\n\n  const handlerInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setIsInputError(false);\n  };\n\n  const handlerAddMovieToTheList = () => {\n    if (movie) {\n      addMovie(movie);\n    }\n\n    clearForm();\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={handlerInputChange}\n            />\n          </div>\n\n          {isInputError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n          {isMovieInTheList && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              The movie is already in the list\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                {\n                  'is-loading': isWaitToMovie,\n                },\n              )}\n              disabled={query.length === 0}\n              onClick={(event) => findMovie(event)}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {(movie && !isError) && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handlerAddMovieToTheList}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {(movie && !isError) && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [isMovieInTheList, setIsMovieInTheList] = useState(false);\n\n  const addMovie = (movie: Movie) => {\n    if (movies.every(movieInList => movieInList.imdbId !== movie.imdbId)) {\n      setMovies(currentMovies => [\n        ...currentMovies,\n        movie,\n      ]);\n    } else {\n      setIsMovieInTheList(true);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n          isMovieInTheList={isMovieInTheList}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}